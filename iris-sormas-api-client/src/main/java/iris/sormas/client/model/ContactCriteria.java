/*
 * SORMAS REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.61.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package iris.sormas.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import iris.sormas.client.model.CaseClassification;
import iris.sormas.client.model.CaseReferenceDto;
import iris.sormas.client.model.CommunityReferenceDto;
import iris.sormas.client.model.ContactCategory;
import iris.sormas.client.model.ContactClassification;
import iris.sormas.client.model.ContactRelation;
import iris.sormas.client.model.ContactStatus;
import iris.sormas.client.model.DateFilterOption;
import iris.sormas.client.model.Disease;
import iris.sormas.client.model.DiseaseVariant;
import iris.sormas.client.model.DistrictReferenceDto;
import iris.sormas.client.model.EntityRelevanceStatus;
import iris.sormas.client.model.EventParticipantReferenceDto;
import iris.sormas.client.model.EventReferenceDto;
import iris.sormas.client.model.FollowUpStatus;
import iris.sormas.client.model.PersonReferenceDto;
import iris.sormas.client.model.QuarantineType;
import iris.sormas.client.model.RegionReferenceDto;
import iris.sormas.client.model.SymptomJournalStatus;
import iris.sormas.client.model.UserReferenceDto;
import iris.sormas.client.model.UserRole;
import iris.sormas.client.model.Vaccination;
import iris.sormas.client.model.YesNoUnknown;
import java.time.OffsetDateTime;
import java.time.Instant;
/**
 * ContactCriteria
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-08T06:53:38.737461+02:00[Europe/Berlin]")
public class ContactCriteria {
  @JsonProperty("reportingUserRole")
  private UserRole reportingUserRole = null;

  @JsonProperty("disease")
  private Disease disease = null;

  @JsonProperty("diseaseVariant")
  private DiseaseVariant diseaseVariant = null;

  @JsonProperty("caze")
  private CaseReferenceDto caze = null;

  @JsonProperty("resultingCase")
  private CaseReferenceDto resultingCase = null;

  @JsonProperty("region")
  private RegionReferenceDto region = null;

  @JsonProperty("district")
  private DistrictReferenceDto district = null;

  @JsonProperty("community")
  private CommunityReferenceDto community = null;

  @JsonProperty("contactOfficer")
  private UserReferenceDto contactOfficer = null;

  @JsonProperty("contactClassification")
  private ContactClassification contactClassification = null;

  @JsonProperty("contactStatus")
  private ContactStatus contactStatus = null;

  @JsonProperty("followUpStatus")
  private FollowUpStatus followUpStatus = null;

  @JsonProperty("reportDateFrom")
  private Instant reportDateFrom = null;

  @JsonProperty("reportDateTo")
  private Instant reportDateTo = null;

  @JsonProperty("dateFilterOption")
  private DateFilterOption dateFilterOption = null;

  @JsonProperty("followUpUntilFrom")
  private Instant followUpUntilFrom = null;

  @JsonProperty("followUpUntilTo")
  private Instant followUpUntilTo = null;

  @JsonProperty("followUpUntilToPrecise")
  private Boolean followUpUntilToPrecise = null;

  @JsonProperty("symptomJournalStatus")
  private SymptomJournalStatus symptomJournalStatus = null;

  @JsonProperty("vaccination")
  private Vaccination vaccination = null;

  @JsonProperty("relationToCase")
  private ContactRelation relationToCase = null;

  @JsonProperty("lastContactDateFrom")
  private Instant lastContactDateFrom = null;

  @JsonProperty("lastContactDateTo")
  private Instant lastContactDateTo = null;

  @JsonProperty("deleted")
  private Boolean deleted = null;

  @JsonProperty("nameUuidCaseLike")
  private String nameUuidCaseLike = null;

  @JsonProperty("relevanceStatus")
  private EntityRelevanceStatus relevanceStatus = null;

  @JsonProperty("onlyHighPriorityContacts")
  private Boolean onlyHighPriorityContacts = null;

  @JsonProperty("contactCategory")
  private ContactCategory contactCategory = null;

  @JsonProperty("caseClassification")
  private CaseClassification caseClassification = null;

  @JsonProperty("quarantineType")
  private QuarantineType quarantineType = null;

  @JsonProperty("quarantineFrom")
  private Instant quarantineFrom = null;

  @JsonProperty("quarantineTo")
  private Instant quarantineTo = null;

  @JsonProperty("onlyQuarantineHelpNeeded")
  private Boolean onlyQuarantineHelpNeeded = null;

  @JsonProperty("quarantineOrderedVerbally")
  private Boolean quarantineOrderedVerbally = null;

  @JsonProperty("quarantineOrderedOfficialDocument")
  private Boolean quarantineOrderedOfficialDocument = null;

  @JsonProperty("quarantineNotOrdered")
  private Boolean quarantineNotOrdered = null;

  @JsonProperty("withExtendedQuarantine")
  private Boolean withExtendedQuarantine = null;

  @JsonProperty("withReducedQuarantine")
  private Boolean withReducedQuarantine = null;

  @JsonProperty("person")
  private PersonReferenceDto person = null;

  @JsonProperty("birthdateYYYY")
  private Integer birthdateYYYY = null;

  @JsonProperty("birthdateMM")
  private Integer birthdateMM = null;

  @JsonProperty("birthdateDD")
  private Integer birthdateDD = null;

  @JsonProperty("returningTraveler")
  private YesNoUnknown returningTraveler = null;

  @JsonProperty("eventLike")
  private String eventLike = null;

  @JsonProperty("eventUuid")
  private String eventUuid = null;

  @JsonProperty("includeContactsFromOtherJurisdictions")
  private Boolean includeContactsFromOtherJurisdictions = null;

  @JsonProperty("onlyContactsSharingEventWithSourceCase")
  private Boolean onlyContactsSharingEventWithSourceCase = null;

  @JsonProperty("eventParticipant")
  private EventParticipantReferenceDto eventParticipant = null;

  @JsonProperty("onlyContactsWithSourceCaseInGivenEvent")
  private EventReferenceDto onlyContactsWithSourceCaseInGivenEvent = null;

  @JsonProperty("onlyContactsFromOtherInstances")
  private Boolean onlyContactsFromOtherInstances = null;

  @JsonProperty("creationDateFrom")
  private Instant creationDateFrom = null;

  @JsonProperty("creationDateTo")
  private Instant creationDateTo = null;

  @JsonProperty("reportingUserLike")
  private String reportingUserLike = null;

  public ContactCriteria reportingUserRole(UserRole reportingUserRole) {
    this.reportingUserRole = reportingUserRole;
    return this;
  }

   /**
   * Get reportingUserRole
   * @return reportingUserRole
  **/
  @Schema(description = "")
  public UserRole getReportingUserRole() {
    return reportingUserRole;
  }

  public void setReportingUserRole(UserRole reportingUserRole) {
    this.reportingUserRole = reportingUserRole;
  }

  public ContactCriteria disease(Disease disease) {
    this.disease = disease;
    return this;
  }

   /**
   * Get disease
   * @return disease
  **/
  @Schema(description = "")
  public Disease getDisease() {
    return disease;
  }

  public void setDisease(Disease disease) {
    this.disease = disease;
  }

  public ContactCriteria diseaseVariant(DiseaseVariant diseaseVariant) {
    this.diseaseVariant = diseaseVariant;
    return this;
  }

   /**
   * Get diseaseVariant
   * @return diseaseVariant
  **/
  @Schema(description = "")
  public DiseaseVariant getDiseaseVariant() {
    return diseaseVariant;
  }

  public void setDiseaseVariant(DiseaseVariant diseaseVariant) {
    this.diseaseVariant = diseaseVariant;
  }

  public ContactCriteria caze(CaseReferenceDto caze) {
    this.caze = caze;
    return this;
  }

   /**
   * Get caze
   * @return caze
  **/
  @Schema(description = "")
  public CaseReferenceDto getCaze() {
    return caze;
  }

  public void setCaze(CaseReferenceDto caze) {
    this.caze = caze;
  }

  public ContactCriteria resultingCase(CaseReferenceDto resultingCase) {
    this.resultingCase = resultingCase;
    return this;
  }

   /**
   * Get resultingCase
   * @return resultingCase
  **/
  @Schema(description = "")
  public CaseReferenceDto getResultingCase() {
    return resultingCase;
  }

  public void setResultingCase(CaseReferenceDto resultingCase) {
    this.resultingCase = resultingCase;
  }

  public ContactCriteria region(RegionReferenceDto region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @Schema(description = "")
  public RegionReferenceDto getRegion() {
    return region;
  }

  public void setRegion(RegionReferenceDto region) {
    this.region = region;
  }

  public ContactCriteria district(DistrictReferenceDto district) {
    this.district = district;
    return this;
  }

   /**
   * Get district
   * @return district
  **/
  @Schema(description = "")
  public DistrictReferenceDto getDistrict() {
    return district;
  }

  public void setDistrict(DistrictReferenceDto district) {
    this.district = district;
  }

  public ContactCriteria community(CommunityReferenceDto community) {
    this.community = community;
    return this;
  }

   /**
   * Get community
   * @return community
  **/
  @Schema(description = "")
  public CommunityReferenceDto getCommunity() {
    return community;
  }

  public void setCommunity(CommunityReferenceDto community) {
    this.community = community;
  }

  public ContactCriteria contactOfficer(UserReferenceDto contactOfficer) {
    this.contactOfficer = contactOfficer;
    return this;
  }

   /**
   * Get contactOfficer
   * @return contactOfficer
  **/
  @Schema(description = "")
  public UserReferenceDto getContactOfficer() {
    return contactOfficer;
  }

  public void setContactOfficer(UserReferenceDto contactOfficer) {
    this.contactOfficer = contactOfficer;
  }

  public ContactCriteria contactClassification(ContactClassification contactClassification) {
    this.contactClassification = contactClassification;
    return this;
  }

   /**
   * Get contactClassification
   * @return contactClassification
  **/
  @Schema(description = "")
  public ContactClassification getContactClassification() {
    return contactClassification;
  }

  public void setContactClassification(ContactClassification contactClassification) {
    this.contactClassification = contactClassification;
  }

  public ContactCriteria contactStatus(ContactStatus contactStatus) {
    this.contactStatus = contactStatus;
    return this;
  }

   /**
   * Get contactStatus
   * @return contactStatus
  **/
  @Schema(description = "")
  public ContactStatus getContactStatus() {
    return contactStatus;
  }

  public void setContactStatus(ContactStatus contactStatus) {
    this.contactStatus = contactStatus;
  }

  public ContactCriteria followUpStatus(FollowUpStatus followUpStatus) {
    this.followUpStatus = followUpStatus;
    return this;
  }

   /**
   * Get followUpStatus
   * @return followUpStatus
  **/
  @Schema(description = "")
  public FollowUpStatus getFollowUpStatus() {
    return followUpStatus;
  }

  public void setFollowUpStatus(FollowUpStatus followUpStatus) {
    this.followUpStatus = followUpStatus;
  }

  public ContactCriteria reportDateFrom(Instant reportDateFrom) {
    this.reportDateFrom = reportDateFrom;
    return this;
  }

   /**
   * Get reportDateFrom
   * @return reportDateFrom
  **/
  @Schema(description = "")
  public Instant getReportDateFrom() {
    return reportDateFrom;
  }

  public void setReportDateFrom(Instant reportDateFrom) {
    this.reportDateFrom = reportDateFrom;
  }

  public ContactCriteria reportDateTo(Instant reportDateTo) {
    this.reportDateTo = reportDateTo;
    return this;
  }

   /**
   * Get reportDateTo
   * @return reportDateTo
  **/
  @Schema(description = "")
  public Instant getReportDateTo() {
    return reportDateTo;
  }

  public void setReportDateTo(Instant reportDateTo) {
    this.reportDateTo = reportDateTo;
  }

  public ContactCriteria dateFilterOption(DateFilterOption dateFilterOption) {
    this.dateFilterOption = dateFilterOption;
    return this;
  }

   /**
   * Get dateFilterOption
   * @return dateFilterOption
  **/
  @Schema(description = "")
  public DateFilterOption getDateFilterOption() {
    return dateFilterOption;
  }

  public void setDateFilterOption(DateFilterOption dateFilterOption) {
    this.dateFilterOption = dateFilterOption;
  }

  public ContactCriteria followUpUntilFrom(Instant followUpUntilFrom) {
    this.followUpUntilFrom = followUpUntilFrom;
    return this;
  }

   /**
   * Get followUpUntilFrom
   * @return followUpUntilFrom
  **/
  @Schema(description = "")
  public Instant getFollowUpUntilFrom() {
    return followUpUntilFrom;
  }

  public void setFollowUpUntilFrom(Instant followUpUntilFrom) {
    this.followUpUntilFrom = followUpUntilFrom;
  }

  public ContactCriteria followUpUntilTo(Instant followUpUntilTo) {
    this.followUpUntilTo = followUpUntilTo;
    return this;
  }

   /**
   * Get followUpUntilTo
   * @return followUpUntilTo
  **/
  @Schema(description = "")
  public Instant getFollowUpUntilTo() {
    return followUpUntilTo;
  }

  public void setFollowUpUntilTo(Instant followUpUntilTo) {
    this.followUpUntilTo = followUpUntilTo;
  }

  public ContactCriteria followUpUntilToPrecise(Boolean followUpUntilToPrecise) {
    this.followUpUntilToPrecise = followUpUntilToPrecise;
    return this;
  }

   /**
   * Get followUpUntilToPrecise
   * @return followUpUntilToPrecise
  **/
  @Schema(description = "")
  public Boolean isFollowUpUntilToPrecise() {
    return followUpUntilToPrecise;
  }

  public void setFollowUpUntilToPrecise(Boolean followUpUntilToPrecise) {
    this.followUpUntilToPrecise = followUpUntilToPrecise;
  }

  public ContactCriteria symptomJournalStatus(SymptomJournalStatus symptomJournalStatus) {
    this.symptomJournalStatus = symptomJournalStatus;
    return this;
  }

   /**
   * Get symptomJournalStatus
   * @return symptomJournalStatus
  **/
  @Schema(description = "")
  public SymptomJournalStatus getSymptomJournalStatus() {
    return symptomJournalStatus;
  }

  public void setSymptomJournalStatus(SymptomJournalStatus symptomJournalStatus) {
    this.symptomJournalStatus = symptomJournalStatus;
  }

  public ContactCriteria vaccination(Vaccination vaccination) {
    this.vaccination = vaccination;
    return this;
  }

   /**
   * Get vaccination
   * @return vaccination
  **/
  @Schema(description = "")
  public Vaccination getVaccination() {
    return vaccination;
  }

  public void setVaccination(Vaccination vaccination) {
    this.vaccination = vaccination;
  }

  public ContactCriteria relationToCase(ContactRelation relationToCase) {
    this.relationToCase = relationToCase;
    return this;
  }

   /**
   * Get relationToCase
   * @return relationToCase
  **/
  @Schema(description = "")
  public ContactRelation getRelationToCase() {
    return relationToCase;
  }

  public void setRelationToCase(ContactRelation relationToCase) {
    this.relationToCase = relationToCase;
  }

  public ContactCriteria lastContactDateFrom(Instant lastContactDateFrom) {
    this.lastContactDateFrom = lastContactDateFrom;
    return this;
  }

   /**
   * Get lastContactDateFrom
   * @return lastContactDateFrom
  **/
  @Schema(description = "")
  public Instant getLastContactDateFrom() {
    return lastContactDateFrom;
  }

  public void setLastContactDateFrom(Instant lastContactDateFrom) {
    this.lastContactDateFrom = lastContactDateFrom;
  }

  public ContactCriteria lastContactDateTo(Instant lastContactDateTo) {
    this.lastContactDateTo = lastContactDateTo;
    return this;
  }

   /**
   * Get lastContactDateTo
   * @return lastContactDateTo
  **/
  @Schema(description = "")
  public Instant getLastContactDateTo() {
    return lastContactDateTo;
  }

  public void setLastContactDateTo(Instant lastContactDateTo) {
    this.lastContactDateTo = lastContactDateTo;
  }

  public ContactCriteria deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Get deleted
   * @return deleted
  **/
  @Schema(description = "")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public ContactCriteria nameUuidCaseLike(String nameUuidCaseLike) {
    this.nameUuidCaseLike = nameUuidCaseLike;
    return this;
  }

   /**
   * Get nameUuidCaseLike
   * @return nameUuidCaseLike
  **/
  @Schema(description = "")
  public String getNameUuidCaseLike() {
    return nameUuidCaseLike;
  }

  public void setNameUuidCaseLike(String nameUuidCaseLike) {
    this.nameUuidCaseLike = nameUuidCaseLike;
  }

  public ContactCriteria relevanceStatus(EntityRelevanceStatus relevanceStatus) {
    this.relevanceStatus = relevanceStatus;
    return this;
  }

   /**
   * Get relevanceStatus
   * @return relevanceStatus
  **/
  @Schema(description = "")
  public EntityRelevanceStatus getRelevanceStatus() {
    return relevanceStatus;
  }

  public void setRelevanceStatus(EntityRelevanceStatus relevanceStatus) {
    this.relevanceStatus = relevanceStatus;
  }

  public ContactCriteria onlyHighPriorityContacts(Boolean onlyHighPriorityContacts) {
    this.onlyHighPriorityContacts = onlyHighPriorityContacts;
    return this;
  }

   /**
   * Get onlyHighPriorityContacts
   * @return onlyHighPriorityContacts
  **/
  @Schema(description = "")
  public Boolean isOnlyHighPriorityContacts() {
    return onlyHighPriorityContacts;
  }

  public void setOnlyHighPriorityContacts(Boolean onlyHighPriorityContacts) {
    this.onlyHighPriorityContacts = onlyHighPriorityContacts;
  }

  public ContactCriteria contactCategory(ContactCategory contactCategory) {
    this.contactCategory = contactCategory;
    return this;
  }

   /**
   * Get contactCategory
   * @return contactCategory
  **/
  @Schema(description = "")
  public ContactCategory getContactCategory() {
    return contactCategory;
  }

  public void setContactCategory(ContactCategory contactCategory) {
    this.contactCategory = contactCategory;
  }

  public ContactCriteria caseClassification(CaseClassification caseClassification) {
    this.caseClassification = caseClassification;
    return this;
  }

   /**
   * Get caseClassification
   * @return caseClassification
  **/
  @Schema(description = "")
  public CaseClassification getCaseClassification() {
    return caseClassification;
  }

  public void setCaseClassification(CaseClassification caseClassification) {
    this.caseClassification = caseClassification;
  }

  public ContactCriteria quarantineType(QuarantineType quarantineType) {
    this.quarantineType = quarantineType;
    return this;
  }

   /**
   * Get quarantineType
   * @return quarantineType
  **/
  @Schema(description = "")
  public QuarantineType getQuarantineType() {
    return quarantineType;
  }

  public void setQuarantineType(QuarantineType quarantineType) {
    this.quarantineType = quarantineType;
  }

  public ContactCriteria quarantineFrom(Instant quarantineFrom) {
    this.quarantineFrom = quarantineFrom;
    return this;
  }

   /**
   * Get quarantineFrom
   * @return quarantineFrom
  **/
  @Schema(description = "")
  public Instant getQuarantineFrom() {
    return quarantineFrom;
  }

  public void setQuarantineFrom(Instant quarantineFrom) {
    this.quarantineFrom = quarantineFrom;
  }

  public ContactCriteria quarantineTo(Instant quarantineTo) {
    this.quarantineTo = quarantineTo;
    return this;
  }

   /**
   * Get quarantineTo
   * @return quarantineTo
  **/
  @Schema(description = "")
  public Instant getQuarantineTo() {
    return quarantineTo;
  }

  public void setQuarantineTo(Instant quarantineTo) {
    this.quarantineTo = quarantineTo;
  }

  public ContactCriteria onlyQuarantineHelpNeeded(Boolean onlyQuarantineHelpNeeded) {
    this.onlyQuarantineHelpNeeded = onlyQuarantineHelpNeeded;
    return this;
  }

   /**
   * Get onlyQuarantineHelpNeeded
   * @return onlyQuarantineHelpNeeded
  **/
  @Schema(description = "")
  public Boolean isOnlyQuarantineHelpNeeded() {
    return onlyQuarantineHelpNeeded;
  }

  public void setOnlyQuarantineHelpNeeded(Boolean onlyQuarantineHelpNeeded) {
    this.onlyQuarantineHelpNeeded = onlyQuarantineHelpNeeded;
  }

  public ContactCriteria quarantineOrderedVerbally(Boolean quarantineOrderedVerbally) {
    this.quarantineOrderedVerbally = quarantineOrderedVerbally;
    return this;
  }

   /**
   * Get quarantineOrderedVerbally
   * @return quarantineOrderedVerbally
  **/
  @Schema(description = "")
  public Boolean isQuarantineOrderedVerbally() {
    return quarantineOrderedVerbally;
  }

  public void setQuarantineOrderedVerbally(Boolean quarantineOrderedVerbally) {
    this.quarantineOrderedVerbally = quarantineOrderedVerbally;
  }

  public ContactCriteria quarantineOrderedOfficialDocument(Boolean quarantineOrderedOfficialDocument) {
    this.quarantineOrderedOfficialDocument = quarantineOrderedOfficialDocument;
    return this;
  }

   /**
   * Get quarantineOrderedOfficialDocument
   * @return quarantineOrderedOfficialDocument
  **/
  @Schema(description = "")
  public Boolean isQuarantineOrderedOfficialDocument() {
    return quarantineOrderedOfficialDocument;
  }

  public void setQuarantineOrderedOfficialDocument(Boolean quarantineOrderedOfficialDocument) {
    this.quarantineOrderedOfficialDocument = quarantineOrderedOfficialDocument;
  }

  public ContactCriteria quarantineNotOrdered(Boolean quarantineNotOrdered) {
    this.quarantineNotOrdered = quarantineNotOrdered;
    return this;
  }

   /**
   * Get quarantineNotOrdered
   * @return quarantineNotOrdered
  **/
  @Schema(description = "")
  public Boolean isQuarantineNotOrdered() {
    return quarantineNotOrdered;
  }

  public void setQuarantineNotOrdered(Boolean quarantineNotOrdered) {
    this.quarantineNotOrdered = quarantineNotOrdered;
  }

  public ContactCriteria withExtendedQuarantine(Boolean withExtendedQuarantine) {
    this.withExtendedQuarantine = withExtendedQuarantine;
    return this;
  }

   /**
   * Get withExtendedQuarantine
   * @return withExtendedQuarantine
  **/
  @Schema(description = "")
  public Boolean isWithExtendedQuarantine() {
    return withExtendedQuarantine;
  }

  public void setWithExtendedQuarantine(Boolean withExtendedQuarantine) {
    this.withExtendedQuarantine = withExtendedQuarantine;
  }

  public ContactCriteria withReducedQuarantine(Boolean withReducedQuarantine) {
    this.withReducedQuarantine = withReducedQuarantine;
    return this;
  }

   /**
   * Get withReducedQuarantine
   * @return withReducedQuarantine
  **/
  @Schema(description = "")
  public Boolean isWithReducedQuarantine() {
    return withReducedQuarantine;
  }

  public void setWithReducedQuarantine(Boolean withReducedQuarantine) {
    this.withReducedQuarantine = withReducedQuarantine;
  }

  public ContactCriteria person(PersonReferenceDto person) {
    this.person = person;
    return this;
  }

   /**
   * Get person
   * @return person
  **/
  @Schema(description = "")
  public PersonReferenceDto getPerson() {
    return person;
  }

  public void setPerson(PersonReferenceDto person) {
    this.person = person;
  }

  public ContactCriteria birthdateYYYY(Integer birthdateYYYY) {
    this.birthdateYYYY = birthdateYYYY;
    return this;
  }

   /**
   * Get birthdateYYYY
   * @return birthdateYYYY
  **/
  @Schema(description = "")
  public Integer getBirthdateYYYY() {
    return birthdateYYYY;
  }

  public void setBirthdateYYYY(Integer birthdateYYYY) {
    this.birthdateYYYY = birthdateYYYY;
  }

  public ContactCriteria birthdateMM(Integer birthdateMM) {
    this.birthdateMM = birthdateMM;
    return this;
  }

   /**
   * Get birthdateMM
   * @return birthdateMM
  **/
  @Schema(description = "")
  public Integer getBirthdateMM() {
    return birthdateMM;
  }

  public void setBirthdateMM(Integer birthdateMM) {
    this.birthdateMM = birthdateMM;
  }

  public ContactCriteria birthdateDD(Integer birthdateDD) {
    this.birthdateDD = birthdateDD;
    return this;
  }

   /**
   * Get birthdateDD
   * @return birthdateDD
  **/
  @Schema(description = "")
  public Integer getBirthdateDD() {
    return birthdateDD;
  }

  public void setBirthdateDD(Integer birthdateDD) {
    this.birthdateDD = birthdateDD;
  }

  public ContactCriteria returningTraveler(YesNoUnknown returningTraveler) {
    this.returningTraveler = returningTraveler;
    return this;
  }

   /**
   * Get returningTraveler
   * @return returningTraveler
  **/
  @Schema(description = "")
  public YesNoUnknown getReturningTraveler() {
    return returningTraveler;
  }

  public void setReturningTraveler(YesNoUnknown returningTraveler) {
    this.returningTraveler = returningTraveler;
  }

  public ContactCriteria eventLike(String eventLike) {
    this.eventLike = eventLike;
    return this;
  }

   /**
   * Get eventLike
   * @return eventLike
  **/
  @Schema(description = "")
  public String getEventLike() {
    return eventLike;
  }

  public void setEventLike(String eventLike) {
    this.eventLike = eventLike;
  }

  public ContactCriteria eventUuid(String eventUuid) {
    this.eventUuid = eventUuid;
    return this;
  }

   /**
   * Get eventUuid
   * @return eventUuid
  **/
  @Schema(description = "")
  public String getEventUuid() {
    return eventUuid;
  }

  public void setEventUuid(String eventUuid) {
    this.eventUuid = eventUuid;
  }

  public ContactCriteria includeContactsFromOtherJurisdictions(Boolean includeContactsFromOtherJurisdictions) {
    this.includeContactsFromOtherJurisdictions = includeContactsFromOtherJurisdictions;
    return this;
  }

   /**
   * Get includeContactsFromOtherJurisdictions
   * @return includeContactsFromOtherJurisdictions
  **/
  @Schema(description = "")
  public Boolean isIncludeContactsFromOtherJurisdictions() {
    return includeContactsFromOtherJurisdictions;
  }

  public void setIncludeContactsFromOtherJurisdictions(Boolean includeContactsFromOtherJurisdictions) {
    this.includeContactsFromOtherJurisdictions = includeContactsFromOtherJurisdictions;
  }

  public ContactCriteria onlyContactsSharingEventWithSourceCase(Boolean onlyContactsSharingEventWithSourceCase) {
    this.onlyContactsSharingEventWithSourceCase = onlyContactsSharingEventWithSourceCase;
    return this;
  }

   /**
   * Get onlyContactsSharingEventWithSourceCase
   * @return onlyContactsSharingEventWithSourceCase
  **/
  @Schema(description = "")
  public Boolean isOnlyContactsSharingEventWithSourceCase() {
    return onlyContactsSharingEventWithSourceCase;
  }

  public void setOnlyContactsSharingEventWithSourceCase(Boolean onlyContactsSharingEventWithSourceCase) {
    this.onlyContactsSharingEventWithSourceCase = onlyContactsSharingEventWithSourceCase;
  }

  public ContactCriteria eventParticipant(EventParticipantReferenceDto eventParticipant) {
    this.eventParticipant = eventParticipant;
    return this;
  }

   /**
   * Get eventParticipant
   * @return eventParticipant
  **/
  @Schema(description = "")
  public EventParticipantReferenceDto getEventParticipant() {
    return eventParticipant;
  }

  public void setEventParticipant(EventParticipantReferenceDto eventParticipant) {
    this.eventParticipant = eventParticipant;
  }

  public ContactCriteria onlyContactsWithSourceCaseInGivenEvent(EventReferenceDto onlyContactsWithSourceCaseInGivenEvent) {
    this.onlyContactsWithSourceCaseInGivenEvent = onlyContactsWithSourceCaseInGivenEvent;
    return this;
  }

   /**
   * Get onlyContactsWithSourceCaseInGivenEvent
   * @return onlyContactsWithSourceCaseInGivenEvent
  **/
  @Schema(description = "")
  public EventReferenceDto getOnlyContactsWithSourceCaseInGivenEvent() {
    return onlyContactsWithSourceCaseInGivenEvent;
  }

  public void setOnlyContactsWithSourceCaseInGivenEvent(EventReferenceDto onlyContactsWithSourceCaseInGivenEvent) {
    this.onlyContactsWithSourceCaseInGivenEvent = onlyContactsWithSourceCaseInGivenEvent;
  }

  public ContactCriteria onlyContactsFromOtherInstances(Boolean onlyContactsFromOtherInstances) {
    this.onlyContactsFromOtherInstances = onlyContactsFromOtherInstances;
    return this;
  }

   /**
   * Get onlyContactsFromOtherInstances
   * @return onlyContactsFromOtherInstances
  **/
  @Schema(description = "")
  public Boolean isOnlyContactsFromOtherInstances() {
    return onlyContactsFromOtherInstances;
  }

  public void setOnlyContactsFromOtherInstances(Boolean onlyContactsFromOtherInstances) {
    this.onlyContactsFromOtherInstances = onlyContactsFromOtherInstances;
  }

  public ContactCriteria creationDateFrom(Instant creationDateFrom) {
    this.creationDateFrom = creationDateFrom;
    return this;
  }

   /**
   * Get creationDateFrom
   * @return creationDateFrom
  **/
  @Schema(description = "")
  public Instant getCreationDateFrom() {
    return creationDateFrom;
  }

  public void setCreationDateFrom(Instant creationDateFrom) {
    this.creationDateFrom = creationDateFrom;
  }

  public ContactCriteria creationDateTo(Instant creationDateTo) {
    this.creationDateTo = creationDateTo;
    return this;
  }

   /**
   * Get creationDateTo
   * @return creationDateTo
  **/
  @Schema(description = "")
  public Instant getCreationDateTo() {
    return creationDateTo;
  }

  public void setCreationDateTo(Instant creationDateTo) {
    this.creationDateTo = creationDateTo;
  }

  public ContactCriteria reportingUserLike(String reportingUserLike) {
    this.reportingUserLike = reportingUserLike;
    return this;
  }

   /**
   * Get reportingUserLike
   * @return reportingUserLike
  **/
  @Schema(description = "")
  public String getReportingUserLike() {
    return reportingUserLike;
  }

  public void setReportingUserLike(String reportingUserLike) {
    this.reportingUserLike = reportingUserLike;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactCriteria contactCriteria = (ContactCriteria) o;
    return Objects.equals(this.reportingUserRole, contactCriteria.reportingUserRole) &&
        Objects.equals(this.disease, contactCriteria.disease) &&
        Objects.equals(this.diseaseVariant, contactCriteria.diseaseVariant) &&
        Objects.equals(this.caze, contactCriteria.caze) &&
        Objects.equals(this.resultingCase, contactCriteria.resultingCase) &&
        Objects.equals(this.region, contactCriteria.region) &&
        Objects.equals(this.district, contactCriteria.district) &&
        Objects.equals(this.community, contactCriteria.community) &&
        Objects.equals(this.contactOfficer, contactCriteria.contactOfficer) &&
        Objects.equals(this.contactClassification, contactCriteria.contactClassification) &&
        Objects.equals(this.contactStatus, contactCriteria.contactStatus) &&
        Objects.equals(this.followUpStatus, contactCriteria.followUpStatus) &&
        Objects.equals(this.reportDateFrom, contactCriteria.reportDateFrom) &&
        Objects.equals(this.reportDateTo, contactCriteria.reportDateTo) &&
        Objects.equals(this.dateFilterOption, contactCriteria.dateFilterOption) &&
        Objects.equals(this.followUpUntilFrom, contactCriteria.followUpUntilFrom) &&
        Objects.equals(this.followUpUntilTo, contactCriteria.followUpUntilTo) &&
        Objects.equals(this.followUpUntilToPrecise, contactCriteria.followUpUntilToPrecise) &&
        Objects.equals(this.symptomJournalStatus, contactCriteria.symptomJournalStatus) &&
        Objects.equals(this.vaccination, contactCriteria.vaccination) &&
        Objects.equals(this.relationToCase, contactCriteria.relationToCase) &&
        Objects.equals(this.lastContactDateFrom, contactCriteria.lastContactDateFrom) &&
        Objects.equals(this.lastContactDateTo, contactCriteria.lastContactDateTo) &&
        Objects.equals(this.deleted, contactCriteria.deleted) &&
        Objects.equals(this.nameUuidCaseLike, contactCriteria.nameUuidCaseLike) &&
        Objects.equals(this.relevanceStatus, contactCriteria.relevanceStatus) &&
        Objects.equals(this.onlyHighPriorityContacts, contactCriteria.onlyHighPriorityContacts) &&
        Objects.equals(this.contactCategory, contactCriteria.contactCategory) &&
        Objects.equals(this.caseClassification, contactCriteria.caseClassification) &&
        Objects.equals(this.quarantineType, contactCriteria.quarantineType) &&
        Objects.equals(this.quarantineFrom, contactCriteria.quarantineFrom) &&
        Objects.equals(this.quarantineTo, contactCriteria.quarantineTo) &&
        Objects.equals(this.onlyQuarantineHelpNeeded, contactCriteria.onlyQuarantineHelpNeeded) &&
        Objects.equals(this.quarantineOrderedVerbally, contactCriteria.quarantineOrderedVerbally) &&
        Objects.equals(this.quarantineOrderedOfficialDocument, contactCriteria.quarantineOrderedOfficialDocument) &&
        Objects.equals(this.quarantineNotOrdered, contactCriteria.quarantineNotOrdered) &&
        Objects.equals(this.withExtendedQuarantine, contactCriteria.withExtendedQuarantine) &&
        Objects.equals(this.withReducedQuarantine, contactCriteria.withReducedQuarantine) &&
        Objects.equals(this.person, contactCriteria.person) &&
        Objects.equals(this.birthdateYYYY, contactCriteria.birthdateYYYY) &&
        Objects.equals(this.birthdateMM, contactCriteria.birthdateMM) &&
        Objects.equals(this.birthdateDD, contactCriteria.birthdateDD) &&
        Objects.equals(this.returningTraveler, contactCriteria.returningTraveler) &&
        Objects.equals(this.eventLike, contactCriteria.eventLike) &&
        Objects.equals(this.eventUuid, contactCriteria.eventUuid) &&
        Objects.equals(this.includeContactsFromOtherJurisdictions, contactCriteria.includeContactsFromOtherJurisdictions) &&
        Objects.equals(this.onlyContactsSharingEventWithSourceCase, contactCriteria.onlyContactsSharingEventWithSourceCase) &&
        Objects.equals(this.eventParticipant, contactCriteria.eventParticipant) &&
        Objects.equals(this.onlyContactsWithSourceCaseInGivenEvent, contactCriteria.onlyContactsWithSourceCaseInGivenEvent) &&
        Objects.equals(this.onlyContactsFromOtherInstances, contactCriteria.onlyContactsFromOtherInstances) &&
        Objects.equals(this.creationDateFrom, contactCriteria.creationDateFrom) &&
        Objects.equals(this.creationDateTo, contactCriteria.creationDateTo) &&
        Objects.equals(this.reportingUserLike, contactCriteria.reportingUserLike);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportingUserRole, disease, diseaseVariant, caze, resultingCase, region, district, community, contactOfficer, contactClassification, contactStatus, followUpStatus, reportDateFrom, reportDateTo, dateFilterOption, followUpUntilFrom, followUpUntilTo, followUpUntilToPrecise, symptomJournalStatus, vaccination, relationToCase, lastContactDateFrom, lastContactDateTo, deleted, nameUuidCaseLike, relevanceStatus, onlyHighPriorityContacts, contactCategory, caseClassification, quarantineType, quarantineFrom, quarantineTo, onlyQuarantineHelpNeeded, quarantineOrderedVerbally, quarantineOrderedOfficialDocument, quarantineNotOrdered, withExtendedQuarantine, withReducedQuarantine, person, birthdateYYYY, birthdateMM, birthdateDD, returningTraveler, eventLike, eventUuid, includeContactsFromOtherJurisdictions, onlyContactsSharingEventWithSourceCase, eventParticipant, onlyContactsWithSourceCaseInGivenEvent, onlyContactsFromOtherInstances, creationDateFrom, creationDateTo, reportingUserLike);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactCriteria {\n");
    
    sb.append("    reportingUserRole: ").append(toIndentedString(reportingUserRole)).append("\n");
    sb.append("    disease: ").append(toIndentedString(disease)).append("\n");
    sb.append("    diseaseVariant: ").append(toIndentedString(diseaseVariant)).append("\n");
    sb.append("    caze: ").append(toIndentedString(caze)).append("\n");
    sb.append("    resultingCase: ").append(toIndentedString(resultingCase)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    community: ").append(toIndentedString(community)).append("\n");
    sb.append("    contactOfficer: ").append(toIndentedString(contactOfficer)).append("\n");
    sb.append("    contactClassification: ").append(toIndentedString(contactClassification)).append("\n");
    sb.append("    contactStatus: ").append(toIndentedString(contactStatus)).append("\n");
    sb.append("    followUpStatus: ").append(toIndentedString(followUpStatus)).append("\n");
    sb.append("    reportDateFrom: ").append(toIndentedString(reportDateFrom)).append("\n");
    sb.append("    reportDateTo: ").append(toIndentedString(reportDateTo)).append("\n");
    sb.append("    dateFilterOption: ").append(toIndentedString(dateFilterOption)).append("\n");
    sb.append("    followUpUntilFrom: ").append(toIndentedString(followUpUntilFrom)).append("\n");
    sb.append("    followUpUntilTo: ").append(toIndentedString(followUpUntilTo)).append("\n");
    sb.append("    followUpUntilToPrecise: ").append(toIndentedString(followUpUntilToPrecise)).append("\n");
    sb.append("    symptomJournalStatus: ").append(toIndentedString(symptomJournalStatus)).append("\n");
    sb.append("    vaccination: ").append(toIndentedString(vaccination)).append("\n");
    sb.append("    relationToCase: ").append(toIndentedString(relationToCase)).append("\n");
    sb.append("    lastContactDateFrom: ").append(toIndentedString(lastContactDateFrom)).append("\n");
    sb.append("    lastContactDateTo: ").append(toIndentedString(lastContactDateTo)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    nameUuidCaseLike: ").append(toIndentedString(nameUuidCaseLike)).append("\n");
    sb.append("    relevanceStatus: ").append(toIndentedString(relevanceStatus)).append("\n");
    sb.append("    onlyHighPriorityContacts: ").append(toIndentedString(onlyHighPriorityContacts)).append("\n");
    sb.append("    contactCategory: ").append(toIndentedString(contactCategory)).append("\n");
    sb.append("    caseClassification: ").append(toIndentedString(caseClassification)).append("\n");
    sb.append("    quarantineType: ").append(toIndentedString(quarantineType)).append("\n");
    sb.append("    quarantineFrom: ").append(toIndentedString(quarantineFrom)).append("\n");
    sb.append("    quarantineTo: ").append(toIndentedString(quarantineTo)).append("\n");
    sb.append("    onlyQuarantineHelpNeeded: ").append(toIndentedString(onlyQuarantineHelpNeeded)).append("\n");
    sb.append("    quarantineOrderedVerbally: ").append(toIndentedString(quarantineOrderedVerbally)).append("\n");
    sb.append("    quarantineOrderedOfficialDocument: ").append(toIndentedString(quarantineOrderedOfficialDocument)).append("\n");
    sb.append("    quarantineNotOrdered: ").append(toIndentedString(quarantineNotOrdered)).append("\n");
    sb.append("    withExtendedQuarantine: ").append(toIndentedString(withExtendedQuarantine)).append("\n");
    sb.append("    withReducedQuarantine: ").append(toIndentedString(withReducedQuarantine)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    birthdateYYYY: ").append(toIndentedString(birthdateYYYY)).append("\n");
    sb.append("    birthdateMM: ").append(toIndentedString(birthdateMM)).append("\n");
    sb.append("    birthdateDD: ").append(toIndentedString(birthdateDD)).append("\n");
    sb.append("    returningTraveler: ").append(toIndentedString(returningTraveler)).append("\n");
    sb.append("    eventLike: ").append(toIndentedString(eventLike)).append("\n");
    sb.append("    eventUuid: ").append(toIndentedString(eventUuid)).append("\n");
    sb.append("    includeContactsFromOtherJurisdictions: ").append(toIndentedString(includeContactsFromOtherJurisdictions)).append("\n");
    sb.append("    onlyContactsSharingEventWithSourceCase: ").append(toIndentedString(onlyContactsSharingEventWithSourceCase)).append("\n");
    sb.append("    eventParticipant: ").append(toIndentedString(eventParticipant)).append("\n");
    sb.append("    onlyContactsWithSourceCaseInGivenEvent: ").append(toIndentedString(onlyContactsWithSourceCaseInGivenEvent)).append("\n");
    sb.append("    onlyContactsFromOtherInstances: ").append(toIndentedString(onlyContactsFromOtherInstances)).append("\n");
    sb.append("    creationDateFrom: ").append(toIndentedString(creationDateFrom)).append("\n");
    sb.append("    creationDateTo: ").append(toIndentedString(creationDateTo)).append("\n");
    sb.append("    reportingUserLike: ").append(toIndentedString(reportingUserLike)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
