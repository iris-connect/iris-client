/*
 * SORMAS REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.61.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package iris.sormas.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import iris.sormas.client.model.ActionStatus;
import iris.sormas.client.model.CaseReferenceDto;
import iris.sormas.client.model.CommunityReferenceDto;
import iris.sormas.client.model.CriteriaDateType;
import iris.sormas.client.model.DateFilterOption;
import iris.sormas.client.model.Disease;
import iris.sormas.client.model.DistrictReferenceDto;
import iris.sormas.client.model.EntityRelevanceStatus;
import iris.sormas.client.model.EventGroupReferenceDto;
import iris.sormas.client.model.EventInvestigationStatus;
import iris.sormas.client.model.EventManagementStatus;
import iris.sormas.client.model.EventReferenceDto;
import iris.sormas.client.model.EventSourceType;
import iris.sormas.client.model.EventStatus;
import iris.sormas.client.model.FacilityReferenceDto;
import iris.sormas.client.model.FacilityType;
import iris.sormas.client.model.PersonReferenceDto;
import iris.sormas.client.model.RegionReferenceDto;
import iris.sormas.client.model.RiskLevel;
import iris.sormas.client.model.TypeOfPlace;
import iris.sormas.client.model.UserReferenceDto;
import iris.sormas.client.model.UserRole;
import java.time.OffsetDateTime;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
/**
 * EventCriteria
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-08T06:53:38.737461+02:00[Europe/Berlin]")
public class EventCriteria {
  @JsonProperty("eventStatus")
  private EventStatus eventStatus = null;

  @JsonProperty("riskLevel")
  private RiskLevel riskLevel = null;

  @JsonProperty("eventInvestigationStatus")
  private EventInvestigationStatus eventInvestigationStatus = null;

  @JsonProperty("disease")
  private Disease disease = null;

  @JsonProperty("reportingUserRole")
  private UserRole reportingUserRole = null;

  @JsonProperty("deleted")
  private Boolean deleted = null;

  @JsonProperty("region")
  private RegionReferenceDto region = null;

  @JsonProperty("district")
  private DistrictReferenceDto district = null;

  @JsonProperty("community")
  private CommunityReferenceDto community = null;

  @JsonProperty("relevanceStatus")
  private EntityRelevanceStatus relevanceStatus = null;

  @JsonProperty("eventDateFrom")
  private Instant eventDateFrom = null;

  @JsonProperty("eventDateTo")
  private Instant eventDateTo = null;

  @JsonProperty("eventDateType")
  private CriteriaDateType eventDateType = null;

  @JsonProperty("dateFilterOption")
  private DateFilterOption dateFilterOption = null;

  @JsonProperty("eventEvolutionDateFrom")
  private Instant eventEvolutionDateFrom = null;

  @JsonProperty("eventEvolutionDateTo")
  private Instant eventEvolutionDateTo = null;

  @JsonProperty("evolutionDateFilterOption")
  private DateFilterOption evolutionDateFilterOption = null;

  @JsonProperty("responsibleUser")
  private UserReferenceDto responsibleUser = null;

  @JsonProperty("freeText")
  private String freeText = null;

  @JsonProperty("freeTextEventParticipants")
  private String freeTextEventParticipants = null;

  @JsonProperty("freeTextEventGroups")
  private String freeTextEventGroups = null;

  @JsonProperty("srcType")
  private EventSourceType srcType = null;

  @JsonProperty("caze")
  private CaseReferenceDto caze = null;

  @JsonProperty("userFilterIncluded")
  private Boolean userFilterIncluded = null;

  @JsonProperty("typeOfPlace")
  private TypeOfPlace typeOfPlace = null;

  @JsonProperty("person")
  private PersonReferenceDto person = null;

  @JsonProperty("facilityType")
  private FacilityType facilityType = null;

  @JsonProperty("facility")
  private FacilityReferenceDto facility = null;

  @JsonProperty("superordinateEvent")
  private EventReferenceDto superordinateEvent = null;

  @JsonProperty("eventGroup")
  private EventGroupReferenceDto eventGroup = null;

  @JsonProperty("excludedUuids")
  private List<String> excludedUuids = null;

  @JsonProperty("hasNoSuperordinateEvent")
  private Boolean hasNoSuperordinateEvent = null;

  @JsonProperty("eventManagementStatus")
  private EventManagementStatus eventManagementStatus = null;

  @JsonProperty("actionStatus")
  private ActionStatus actionStatus = null;

  @JsonProperty("actionChangeDateFrom")
  private Instant actionChangeDateFrom = null;

  @JsonProperty("actionChangeDateTo")
  private Instant actionChangeDateTo = null;

  @JsonProperty("actionChangeDateFilterOption")
  private DateFilterOption actionChangeDateFilterOption = null;

  @JsonProperty("onlyEntitiesNotSharedWithExternalSurvTool")
  private Boolean onlyEntitiesNotSharedWithExternalSurvTool = null;

  @JsonProperty("onlyEntitiesSharedWithExternalSurvTool")
  private Boolean onlyEntitiesSharedWithExternalSurvTool = null;

  @JsonProperty("onlyEntitiesChangedSinceLastSharedWithExternalSurvTool")
  private Boolean onlyEntitiesChangedSinceLastSharedWithExternalSurvTool = null;

  public EventCriteria eventStatus(EventStatus eventStatus) {
    this.eventStatus = eventStatus;
    return this;
  }

   /**
   * Get eventStatus
   * @return eventStatus
  **/
  @Schema(description = "")
  public EventStatus getEventStatus() {
    return eventStatus;
  }

  public void setEventStatus(EventStatus eventStatus) {
    this.eventStatus = eventStatus;
  }

  public EventCriteria riskLevel(RiskLevel riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Get riskLevel
   * @return riskLevel
  **/
  @Schema(description = "")
  public RiskLevel getRiskLevel() {
    return riskLevel;
  }

  public void setRiskLevel(RiskLevel riskLevel) {
    this.riskLevel = riskLevel;
  }

  public EventCriteria eventInvestigationStatus(EventInvestigationStatus eventInvestigationStatus) {
    this.eventInvestigationStatus = eventInvestigationStatus;
    return this;
  }

   /**
   * Get eventInvestigationStatus
   * @return eventInvestigationStatus
  **/
  @Schema(description = "")
  public EventInvestigationStatus getEventInvestigationStatus() {
    return eventInvestigationStatus;
  }

  public void setEventInvestigationStatus(EventInvestigationStatus eventInvestigationStatus) {
    this.eventInvestigationStatus = eventInvestigationStatus;
  }

  public EventCriteria disease(Disease disease) {
    this.disease = disease;
    return this;
  }

   /**
   * Get disease
   * @return disease
  **/
  @Schema(description = "")
  public Disease getDisease() {
    return disease;
  }

  public void setDisease(Disease disease) {
    this.disease = disease;
  }

  public EventCriteria reportingUserRole(UserRole reportingUserRole) {
    this.reportingUserRole = reportingUserRole;
    return this;
  }

   /**
   * Get reportingUserRole
   * @return reportingUserRole
  **/
  @Schema(description = "")
  public UserRole getReportingUserRole() {
    return reportingUserRole;
  }

  public void setReportingUserRole(UserRole reportingUserRole) {
    this.reportingUserRole = reportingUserRole;
  }

  public EventCriteria deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Get deleted
   * @return deleted
  **/
  @Schema(description = "")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public EventCriteria region(RegionReferenceDto region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @Schema(description = "")
  public RegionReferenceDto getRegion() {
    return region;
  }

  public void setRegion(RegionReferenceDto region) {
    this.region = region;
  }

  public EventCriteria district(DistrictReferenceDto district) {
    this.district = district;
    return this;
  }

   /**
   * Get district
   * @return district
  **/
  @Schema(description = "")
  public DistrictReferenceDto getDistrict() {
    return district;
  }

  public void setDistrict(DistrictReferenceDto district) {
    this.district = district;
  }

  public EventCriteria community(CommunityReferenceDto community) {
    this.community = community;
    return this;
  }

   /**
   * Get community
   * @return community
  **/
  @Schema(description = "")
  public CommunityReferenceDto getCommunity() {
    return community;
  }

  public void setCommunity(CommunityReferenceDto community) {
    this.community = community;
  }

  public EventCriteria relevanceStatus(EntityRelevanceStatus relevanceStatus) {
    this.relevanceStatus = relevanceStatus;
    return this;
  }

   /**
   * Get relevanceStatus
   * @return relevanceStatus
  **/
  @Schema(description = "")
  public EntityRelevanceStatus getRelevanceStatus() {
    return relevanceStatus;
  }

  public void setRelevanceStatus(EntityRelevanceStatus relevanceStatus) {
    this.relevanceStatus = relevanceStatus;
  }

  public EventCriteria eventDateFrom(Instant eventDateFrom) {
    this.eventDateFrom = eventDateFrom;
    return this;
  }

   /**
   * Get eventDateFrom
   * @return eventDateFrom
  **/
  @Schema(description = "")
  public Instant getEventDateFrom() {
    return eventDateFrom;
  }

  public void setEventDateFrom(Instant eventDateFrom) {
    this.eventDateFrom = eventDateFrom;
  }

  public EventCriteria eventDateTo(Instant eventDateTo) {
    this.eventDateTo = eventDateTo;
    return this;
  }

   /**
   * Get eventDateTo
   * @return eventDateTo
  **/
  @Schema(description = "")
  public Instant getEventDateTo() {
    return eventDateTo;
  }

  public void setEventDateTo(Instant eventDateTo) {
    this.eventDateTo = eventDateTo;
  }

  public EventCriteria eventDateType(CriteriaDateType eventDateType) {
    this.eventDateType = eventDateType;
    return this;
  }

   /**
   * Get eventDateType
   * @return eventDateType
  **/
  @Schema(description = "")
  public CriteriaDateType getEventDateType() {
    return eventDateType;
  }

  public void setEventDateType(CriteriaDateType eventDateType) {
    this.eventDateType = eventDateType;
  }

  public EventCriteria dateFilterOption(DateFilterOption dateFilterOption) {
    this.dateFilterOption = dateFilterOption;
    return this;
  }

   /**
   * Get dateFilterOption
   * @return dateFilterOption
  **/
  @Schema(description = "")
  public DateFilterOption getDateFilterOption() {
    return dateFilterOption;
  }

  public void setDateFilterOption(DateFilterOption dateFilterOption) {
    this.dateFilterOption = dateFilterOption;
  }

  public EventCriteria eventEvolutionDateFrom(Instant eventEvolutionDateFrom) {
    this.eventEvolutionDateFrom = eventEvolutionDateFrom;
    return this;
  }

   /**
   * Get eventEvolutionDateFrom
   * @return eventEvolutionDateFrom
  **/
  @Schema(description = "")
  public Instant getEventEvolutionDateFrom() {
    return eventEvolutionDateFrom;
  }

  public void setEventEvolutionDateFrom(Instant eventEvolutionDateFrom) {
    this.eventEvolutionDateFrom = eventEvolutionDateFrom;
  }

  public EventCriteria eventEvolutionDateTo(Instant eventEvolutionDateTo) {
    this.eventEvolutionDateTo = eventEvolutionDateTo;
    return this;
  }

   /**
   * Get eventEvolutionDateTo
   * @return eventEvolutionDateTo
  **/
  @Schema(description = "")
  public Instant getEventEvolutionDateTo() {
    return eventEvolutionDateTo;
  }

  public void setEventEvolutionDateTo(Instant eventEvolutionDateTo) {
    this.eventEvolutionDateTo = eventEvolutionDateTo;
  }

  public EventCriteria evolutionDateFilterOption(DateFilterOption evolutionDateFilterOption) {
    this.evolutionDateFilterOption = evolutionDateFilterOption;
    return this;
  }

   /**
   * Get evolutionDateFilterOption
   * @return evolutionDateFilterOption
  **/
  @Schema(description = "")
  public DateFilterOption getEvolutionDateFilterOption() {
    return evolutionDateFilterOption;
  }

  public void setEvolutionDateFilterOption(DateFilterOption evolutionDateFilterOption) {
    this.evolutionDateFilterOption = evolutionDateFilterOption;
  }

  public EventCriteria responsibleUser(UserReferenceDto responsibleUser) {
    this.responsibleUser = responsibleUser;
    return this;
  }

   /**
   * Get responsibleUser
   * @return responsibleUser
  **/
  @Schema(description = "")
  public UserReferenceDto getResponsibleUser() {
    return responsibleUser;
  }

  public void setResponsibleUser(UserReferenceDto responsibleUser) {
    this.responsibleUser = responsibleUser;
  }

  public EventCriteria freeText(String freeText) {
    this.freeText = freeText;
    return this;
  }

   /**
   * Get freeText
   * @return freeText
  **/
  @Schema(description = "")
  public String getFreeText() {
    return freeText;
  }

  public void setFreeText(String freeText) {
    this.freeText = freeText;
  }

  public EventCriteria freeTextEventParticipants(String freeTextEventParticipants) {
    this.freeTextEventParticipants = freeTextEventParticipants;
    return this;
  }

   /**
   * Get freeTextEventParticipants
   * @return freeTextEventParticipants
  **/
  @Schema(description = "")
  public String getFreeTextEventParticipants() {
    return freeTextEventParticipants;
  }

  public void setFreeTextEventParticipants(String freeTextEventParticipants) {
    this.freeTextEventParticipants = freeTextEventParticipants;
  }

  public EventCriteria freeTextEventGroups(String freeTextEventGroups) {
    this.freeTextEventGroups = freeTextEventGroups;
    return this;
  }

   /**
   * Get freeTextEventGroups
   * @return freeTextEventGroups
  **/
  @Schema(description = "")
  public String getFreeTextEventGroups() {
    return freeTextEventGroups;
  }

  public void setFreeTextEventGroups(String freeTextEventGroups) {
    this.freeTextEventGroups = freeTextEventGroups;
  }

  public EventCriteria srcType(EventSourceType srcType) {
    this.srcType = srcType;
    return this;
  }

   /**
   * Get srcType
   * @return srcType
  **/
  @Schema(description = "")
  public EventSourceType getSrcType() {
    return srcType;
  }

  public void setSrcType(EventSourceType srcType) {
    this.srcType = srcType;
  }

  public EventCriteria caze(CaseReferenceDto caze) {
    this.caze = caze;
    return this;
  }

   /**
   * Get caze
   * @return caze
  **/
  @Schema(description = "")
  public CaseReferenceDto getCaze() {
    return caze;
  }

  public void setCaze(CaseReferenceDto caze) {
    this.caze = caze;
  }

  public EventCriteria userFilterIncluded(Boolean userFilterIncluded) {
    this.userFilterIncluded = userFilterIncluded;
    return this;
  }

   /**
   * Get userFilterIncluded
   * @return userFilterIncluded
  **/
  @Schema(description = "")
  public Boolean isUserFilterIncluded() {
    return userFilterIncluded;
  }

  public void setUserFilterIncluded(Boolean userFilterIncluded) {
    this.userFilterIncluded = userFilterIncluded;
  }

  public EventCriteria typeOfPlace(TypeOfPlace typeOfPlace) {
    this.typeOfPlace = typeOfPlace;
    return this;
  }

   /**
   * Get typeOfPlace
   * @return typeOfPlace
  **/
  @Schema(description = "")
  public TypeOfPlace getTypeOfPlace() {
    return typeOfPlace;
  }

  public void setTypeOfPlace(TypeOfPlace typeOfPlace) {
    this.typeOfPlace = typeOfPlace;
  }

  public EventCriteria person(PersonReferenceDto person) {
    this.person = person;
    return this;
  }

   /**
   * Get person
   * @return person
  **/
  @Schema(description = "")
  public PersonReferenceDto getPerson() {
    return person;
  }

  public void setPerson(PersonReferenceDto person) {
    this.person = person;
  }

  public EventCriteria facilityType(FacilityType facilityType) {
    this.facilityType = facilityType;
    return this;
  }

   /**
   * Get facilityType
   * @return facilityType
  **/
  @Schema(description = "")
  public FacilityType getFacilityType() {
    return facilityType;
  }

  public void setFacilityType(FacilityType facilityType) {
    this.facilityType = facilityType;
  }

  public EventCriteria facility(FacilityReferenceDto facility) {
    this.facility = facility;
    return this;
  }

   /**
   * Get facility
   * @return facility
  **/
  @Schema(description = "")
  public FacilityReferenceDto getFacility() {
    return facility;
  }

  public void setFacility(FacilityReferenceDto facility) {
    this.facility = facility;
  }

  public EventCriteria superordinateEvent(EventReferenceDto superordinateEvent) {
    this.superordinateEvent = superordinateEvent;
    return this;
  }

   /**
   * Get superordinateEvent
   * @return superordinateEvent
  **/
  @Schema(description = "")
  public EventReferenceDto getSuperordinateEvent() {
    return superordinateEvent;
  }

  public void setSuperordinateEvent(EventReferenceDto superordinateEvent) {
    this.superordinateEvent = superordinateEvent;
  }

  public EventCriteria eventGroup(EventGroupReferenceDto eventGroup) {
    this.eventGroup = eventGroup;
    return this;
  }

   /**
   * Get eventGroup
   * @return eventGroup
  **/
  @Schema(description = "")
  public EventGroupReferenceDto getEventGroup() {
    return eventGroup;
  }

  public void setEventGroup(EventGroupReferenceDto eventGroup) {
    this.eventGroup = eventGroup;
  }

  public EventCriteria excludedUuids(List<String> excludedUuids) {
    this.excludedUuids = excludedUuids;
    return this;
  }

  public EventCriteria addExcludedUuidsItem(String excludedUuidsItem) {
    if (this.excludedUuids == null) {
      this.excludedUuids = new ArrayList<>();
    }
    this.excludedUuids.add(excludedUuidsItem);
    return this;
  }

   /**
   * Get excludedUuids
   * @return excludedUuids
  **/
  @Schema(description = "")
  public List<String> getExcludedUuids() {
    return excludedUuids;
  }

  public void setExcludedUuids(List<String> excludedUuids) {
    this.excludedUuids = excludedUuids;
  }

  public EventCriteria hasNoSuperordinateEvent(Boolean hasNoSuperordinateEvent) {
    this.hasNoSuperordinateEvent = hasNoSuperordinateEvent;
    return this;
  }

   /**
   * Get hasNoSuperordinateEvent
   * @return hasNoSuperordinateEvent
  **/
  @Schema(description = "")
  public Boolean isHasNoSuperordinateEvent() {
    return hasNoSuperordinateEvent;
  }

  public void setHasNoSuperordinateEvent(Boolean hasNoSuperordinateEvent) {
    this.hasNoSuperordinateEvent = hasNoSuperordinateEvent;
  }

  public EventCriteria eventManagementStatus(EventManagementStatus eventManagementStatus) {
    this.eventManagementStatus = eventManagementStatus;
    return this;
  }

   /**
   * Get eventManagementStatus
   * @return eventManagementStatus
  **/
  @Schema(description = "")
  public EventManagementStatus getEventManagementStatus() {
    return eventManagementStatus;
  }

  public void setEventManagementStatus(EventManagementStatus eventManagementStatus) {
    this.eventManagementStatus = eventManagementStatus;
  }

  public EventCriteria actionStatus(ActionStatus actionStatus) {
    this.actionStatus = actionStatus;
    return this;
  }

   /**
   * Get actionStatus
   * @return actionStatus
  **/
  @Schema(description = "")
  public ActionStatus getActionStatus() {
    return actionStatus;
  }

  public void setActionStatus(ActionStatus actionStatus) {
    this.actionStatus = actionStatus;
  }

  public EventCriteria actionChangeDateFrom(Instant actionChangeDateFrom) {
    this.actionChangeDateFrom = actionChangeDateFrom;
    return this;
  }

   /**
   * Get actionChangeDateFrom
   * @return actionChangeDateFrom
  **/
  @Schema(description = "")
  public Instant getActionChangeDateFrom() {
    return actionChangeDateFrom;
  }

  public void setActionChangeDateFrom(Instant actionChangeDateFrom) {
    this.actionChangeDateFrom = actionChangeDateFrom;
  }

  public EventCriteria actionChangeDateTo(Instant actionChangeDateTo) {
    this.actionChangeDateTo = actionChangeDateTo;
    return this;
  }

   /**
   * Get actionChangeDateTo
   * @return actionChangeDateTo
  **/
  @Schema(description = "")
  public Instant getActionChangeDateTo() {
    return actionChangeDateTo;
  }

  public void setActionChangeDateTo(Instant actionChangeDateTo) {
    this.actionChangeDateTo = actionChangeDateTo;
  }

  public EventCriteria actionChangeDateFilterOption(DateFilterOption actionChangeDateFilterOption) {
    this.actionChangeDateFilterOption = actionChangeDateFilterOption;
    return this;
  }

   /**
   * Get actionChangeDateFilterOption
   * @return actionChangeDateFilterOption
  **/
  @Schema(description = "")
  public DateFilterOption getActionChangeDateFilterOption() {
    return actionChangeDateFilterOption;
  }

  public void setActionChangeDateFilterOption(DateFilterOption actionChangeDateFilterOption) {
    this.actionChangeDateFilterOption = actionChangeDateFilterOption;
  }

  public EventCriteria onlyEntitiesNotSharedWithExternalSurvTool(Boolean onlyEntitiesNotSharedWithExternalSurvTool) {
    this.onlyEntitiesNotSharedWithExternalSurvTool = onlyEntitiesNotSharedWithExternalSurvTool;
    return this;
  }

   /**
   * Get onlyEntitiesNotSharedWithExternalSurvTool
   * @return onlyEntitiesNotSharedWithExternalSurvTool
  **/
  @Schema(description = "")
  public Boolean isOnlyEntitiesNotSharedWithExternalSurvTool() {
    return onlyEntitiesNotSharedWithExternalSurvTool;
  }

  public void setOnlyEntitiesNotSharedWithExternalSurvTool(Boolean onlyEntitiesNotSharedWithExternalSurvTool) {
    this.onlyEntitiesNotSharedWithExternalSurvTool = onlyEntitiesNotSharedWithExternalSurvTool;
  }

  public EventCriteria onlyEntitiesSharedWithExternalSurvTool(Boolean onlyEntitiesSharedWithExternalSurvTool) {
    this.onlyEntitiesSharedWithExternalSurvTool = onlyEntitiesSharedWithExternalSurvTool;
    return this;
  }

   /**
   * Get onlyEntitiesSharedWithExternalSurvTool
   * @return onlyEntitiesSharedWithExternalSurvTool
  **/
  @Schema(description = "")
  public Boolean isOnlyEntitiesSharedWithExternalSurvTool() {
    return onlyEntitiesSharedWithExternalSurvTool;
  }

  public void setOnlyEntitiesSharedWithExternalSurvTool(Boolean onlyEntitiesSharedWithExternalSurvTool) {
    this.onlyEntitiesSharedWithExternalSurvTool = onlyEntitiesSharedWithExternalSurvTool;
  }

  public EventCriteria onlyEntitiesChangedSinceLastSharedWithExternalSurvTool(Boolean onlyEntitiesChangedSinceLastSharedWithExternalSurvTool) {
    this.onlyEntitiesChangedSinceLastSharedWithExternalSurvTool = onlyEntitiesChangedSinceLastSharedWithExternalSurvTool;
    return this;
  }

   /**
   * Get onlyEntitiesChangedSinceLastSharedWithExternalSurvTool
   * @return onlyEntitiesChangedSinceLastSharedWithExternalSurvTool
  **/
  @Schema(description = "")
  public Boolean isOnlyEntitiesChangedSinceLastSharedWithExternalSurvTool() {
    return onlyEntitiesChangedSinceLastSharedWithExternalSurvTool;
  }

  public void setOnlyEntitiesChangedSinceLastSharedWithExternalSurvTool(Boolean onlyEntitiesChangedSinceLastSharedWithExternalSurvTool) {
    this.onlyEntitiesChangedSinceLastSharedWithExternalSurvTool = onlyEntitiesChangedSinceLastSharedWithExternalSurvTool;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventCriteria eventCriteria = (EventCriteria) o;
    return Objects.equals(this.eventStatus, eventCriteria.eventStatus) &&
        Objects.equals(this.riskLevel, eventCriteria.riskLevel) &&
        Objects.equals(this.eventInvestigationStatus, eventCriteria.eventInvestigationStatus) &&
        Objects.equals(this.disease, eventCriteria.disease) &&
        Objects.equals(this.reportingUserRole, eventCriteria.reportingUserRole) &&
        Objects.equals(this.deleted, eventCriteria.deleted) &&
        Objects.equals(this.region, eventCriteria.region) &&
        Objects.equals(this.district, eventCriteria.district) &&
        Objects.equals(this.community, eventCriteria.community) &&
        Objects.equals(this.relevanceStatus, eventCriteria.relevanceStatus) &&
        Objects.equals(this.eventDateFrom, eventCriteria.eventDateFrom) &&
        Objects.equals(this.eventDateTo, eventCriteria.eventDateTo) &&
        Objects.equals(this.eventDateType, eventCriteria.eventDateType) &&
        Objects.equals(this.dateFilterOption, eventCriteria.dateFilterOption) &&
        Objects.equals(this.eventEvolutionDateFrom, eventCriteria.eventEvolutionDateFrom) &&
        Objects.equals(this.eventEvolutionDateTo, eventCriteria.eventEvolutionDateTo) &&
        Objects.equals(this.evolutionDateFilterOption, eventCriteria.evolutionDateFilterOption) &&
        Objects.equals(this.responsibleUser, eventCriteria.responsibleUser) &&
        Objects.equals(this.freeText, eventCriteria.freeText) &&
        Objects.equals(this.freeTextEventParticipants, eventCriteria.freeTextEventParticipants) &&
        Objects.equals(this.freeTextEventGroups, eventCriteria.freeTextEventGroups) &&
        Objects.equals(this.srcType, eventCriteria.srcType) &&
        Objects.equals(this.caze, eventCriteria.caze) &&
        Objects.equals(this.userFilterIncluded, eventCriteria.userFilterIncluded) &&
        Objects.equals(this.typeOfPlace, eventCriteria.typeOfPlace) &&
        Objects.equals(this.person, eventCriteria.person) &&
        Objects.equals(this.facilityType, eventCriteria.facilityType) &&
        Objects.equals(this.facility, eventCriteria.facility) &&
        Objects.equals(this.superordinateEvent, eventCriteria.superordinateEvent) &&
        Objects.equals(this.eventGroup, eventCriteria.eventGroup) &&
        Objects.equals(this.excludedUuids, eventCriteria.excludedUuids) &&
        Objects.equals(this.hasNoSuperordinateEvent, eventCriteria.hasNoSuperordinateEvent) &&
        Objects.equals(this.eventManagementStatus, eventCriteria.eventManagementStatus) &&
        Objects.equals(this.actionStatus, eventCriteria.actionStatus) &&
        Objects.equals(this.actionChangeDateFrom, eventCriteria.actionChangeDateFrom) &&
        Objects.equals(this.actionChangeDateTo, eventCriteria.actionChangeDateTo) &&
        Objects.equals(this.actionChangeDateFilterOption, eventCriteria.actionChangeDateFilterOption) &&
        Objects.equals(this.onlyEntitiesNotSharedWithExternalSurvTool, eventCriteria.onlyEntitiesNotSharedWithExternalSurvTool) &&
        Objects.equals(this.onlyEntitiesSharedWithExternalSurvTool, eventCriteria.onlyEntitiesSharedWithExternalSurvTool) &&
        Objects.equals(this.onlyEntitiesChangedSinceLastSharedWithExternalSurvTool, eventCriteria.onlyEntitiesChangedSinceLastSharedWithExternalSurvTool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventStatus, riskLevel, eventInvestigationStatus, disease, reportingUserRole, deleted, region, district, community, relevanceStatus, eventDateFrom, eventDateTo, eventDateType, dateFilterOption, eventEvolutionDateFrom, eventEvolutionDateTo, evolutionDateFilterOption, responsibleUser, freeText, freeTextEventParticipants, freeTextEventGroups, srcType, caze, userFilterIncluded, typeOfPlace, person, facilityType, facility, superordinateEvent, eventGroup, excludedUuids, hasNoSuperordinateEvent, eventManagementStatus, actionStatus, actionChangeDateFrom, actionChangeDateTo, actionChangeDateFilterOption, onlyEntitiesNotSharedWithExternalSurvTool, onlyEntitiesSharedWithExternalSurvTool, onlyEntitiesChangedSinceLastSharedWithExternalSurvTool);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventCriteria {\n");
    
    sb.append("    eventStatus: ").append(toIndentedString(eventStatus)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    eventInvestigationStatus: ").append(toIndentedString(eventInvestigationStatus)).append("\n");
    sb.append("    disease: ").append(toIndentedString(disease)).append("\n");
    sb.append("    reportingUserRole: ").append(toIndentedString(reportingUserRole)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    community: ").append(toIndentedString(community)).append("\n");
    sb.append("    relevanceStatus: ").append(toIndentedString(relevanceStatus)).append("\n");
    sb.append("    eventDateFrom: ").append(toIndentedString(eventDateFrom)).append("\n");
    sb.append("    eventDateTo: ").append(toIndentedString(eventDateTo)).append("\n");
    sb.append("    eventDateType: ").append(toIndentedString(eventDateType)).append("\n");
    sb.append("    dateFilterOption: ").append(toIndentedString(dateFilterOption)).append("\n");
    sb.append("    eventEvolutionDateFrom: ").append(toIndentedString(eventEvolutionDateFrom)).append("\n");
    sb.append("    eventEvolutionDateTo: ").append(toIndentedString(eventEvolutionDateTo)).append("\n");
    sb.append("    evolutionDateFilterOption: ").append(toIndentedString(evolutionDateFilterOption)).append("\n");
    sb.append("    responsibleUser: ").append(toIndentedString(responsibleUser)).append("\n");
    sb.append("    freeText: ").append(toIndentedString(freeText)).append("\n");
    sb.append("    freeTextEventParticipants: ").append(toIndentedString(freeTextEventParticipants)).append("\n");
    sb.append("    freeTextEventGroups: ").append(toIndentedString(freeTextEventGroups)).append("\n");
    sb.append("    srcType: ").append(toIndentedString(srcType)).append("\n");
    sb.append("    caze: ").append(toIndentedString(caze)).append("\n");
    sb.append("    userFilterIncluded: ").append(toIndentedString(userFilterIncluded)).append("\n");
    sb.append("    typeOfPlace: ").append(toIndentedString(typeOfPlace)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    facilityType: ").append(toIndentedString(facilityType)).append("\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    superordinateEvent: ").append(toIndentedString(superordinateEvent)).append("\n");
    sb.append("    eventGroup: ").append(toIndentedString(eventGroup)).append("\n");
    sb.append("    excludedUuids: ").append(toIndentedString(excludedUuids)).append("\n");
    sb.append("    hasNoSuperordinateEvent: ").append(toIndentedString(hasNoSuperordinateEvent)).append("\n");
    sb.append("    eventManagementStatus: ").append(toIndentedString(eventManagementStatus)).append("\n");
    sb.append("    actionStatus: ").append(toIndentedString(actionStatus)).append("\n");
    sb.append("    actionChangeDateFrom: ").append(toIndentedString(actionChangeDateFrom)).append("\n");
    sb.append("    actionChangeDateTo: ").append(toIndentedString(actionChangeDateTo)).append("\n");
    sb.append("    actionChangeDateFilterOption: ").append(toIndentedString(actionChangeDateFilterOption)).append("\n");
    sb.append("    onlyEntitiesNotSharedWithExternalSurvTool: ").append(toIndentedString(onlyEntitiesNotSharedWithExternalSurvTool)).append("\n");
    sb.append("    onlyEntitiesSharedWithExternalSurvTool: ").append(toIndentedString(onlyEntitiesSharedWithExternalSurvTool)).append("\n");
    sb.append("    onlyEntitiesChangedSinceLastSharedWithExternalSurvTool: ").append(toIndentedString(onlyEntitiesChangedSinceLastSharedWithExternalSurvTool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
