/*
 * SORMAS REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.61.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package iris.sormas.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import iris.sormas.client.model.SampleReferenceDto;
import iris.sormas.client.model.SimpleTestResultType;
import java.time.OffsetDateTime;
import java.time.Instant;
/**
 * AdditionalTestDto
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-08T06:53:38.737461+02:00[Europe/Berlin]")
public class AdditionalTestDto {
  @JsonProperty("creationDate")
  private Instant creationDate = null;

  @JsonProperty("changeDate")
  private Instant changeDate = null;

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("sample")
  private SampleReferenceDto sample = null;

  @JsonProperty("testDateTime")
  private Instant testDateTime = null;

  @JsonProperty("haemoglobinuria")
  private SimpleTestResultType haemoglobinuria = null;

  @JsonProperty("proteinuria")
  private SimpleTestResultType proteinuria = null;

  @JsonProperty("hematuria")
  private SimpleTestResultType hematuria = null;

  @JsonProperty("arterialVenousGasPH")
  private Float arterialVenousGasPH = null;

  @JsonProperty("arterialVenousGasPco2")
  private Float arterialVenousGasPco2 = null;

  @JsonProperty("arterialVenousGasPao2")
  private Float arterialVenousGasPao2 = null;

  @JsonProperty("arterialVenousGasHco3")
  private Float arterialVenousGasHco3 = null;

  @JsonProperty("gasOxygenTherapy")
  private Float gasOxygenTherapy = null;

  @JsonProperty("altSgpt")
  private Float altSgpt = null;

  @JsonProperty("astSgot")
  private Float astSgot = null;

  @JsonProperty("creatinine")
  private Float creatinine = null;

  @JsonProperty("potassium")
  private Float potassium = null;

  @JsonProperty("urea")
  private Float urea = null;

  @JsonProperty("haemoglobin")
  private Float haemoglobin = null;

  @JsonProperty("totalBilirubin")
  private Float totalBilirubin = null;

  @JsonProperty("conjBilirubin")
  private Float conjBilirubin = null;

  @JsonProperty("wbcCount")
  private Float wbcCount = null;

  @JsonProperty("platelets")
  private Float platelets = null;

  @JsonProperty("prothrombinTime")
  private Float prothrombinTime = null;

  @JsonProperty("otherTestResults")
  private String otherTestResults = null;

  public AdditionalTestDto creationDate(Instant creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @Schema(description = "")
  public Instant getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Instant creationDate) {
    this.creationDate = creationDate;
  }

  public AdditionalTestDto changeDate(Instant changeDate) {
    this.changeDate = changeDate;
    return this;
  }

   /**
   * Get changeDate
   * @return changeDate
  **/
  @Schema(description = "")
  public Instant getChangeDate() {
    return changeDate;
  }

  public void setChangeDate(Instant changeDate) {
    this.changeDate = changeDate;
  }

  public AdditionalTestDto uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public AdditionalTestDto sample(SampleReferenceDto sample) {
    this.sample = sample;
    return this;
  }

   /**
   * Get sample
   * @return sample
  **/
  @Schema(description = "")
  public SampleReferenceDto getSample() {
    return sample;
  }

  public void setSample(SampleReferenceDto sample) {
    this.sample = sample;
  }

  public AdditionalTestDto testDateTime(Instant testDateTime) {
    this.testDateTime = testDateTime;
    return this;
  }

   /**
   * Get testDateTime
   * @return testDateTime
  **/
  @Schema(description = "")
  public Instant getTestDateTime() {
    return testDateTime;
  }

  public void setTestDateTime(Instant testDateTime) {
    this.testDateTime = testDateTime;
  }

  public AdditionalTestDto haemoglobinuria(SimpleTestResultType haemoglobinuria) {
    this.haemoglobinuria = haemoglobinuria;
    return this;
  }

   /**
   * Get haemoglobinuria
   * @return haemoglobinuria
  **/
  @Schema(description = "")
  public SimpleTestResultType getHaemoglobinuria() {
    return haemoglobinuria;
  }

  public void setHaemoglobinuria(SimpleTestResultType haemoglobinuria) {
    this.haemoglobinuria = haemoglobinuria;
  }

  public AdditionalTestDto proteinuria(SimpleTestResultType proteinuria) {
    this.proteinuria = proteinuria;
    return this;
  }

   /**
   * Get proteinuria
   * @return proteinuria
  **/
  @Schema(description = "")
  public SimpleTestResultType getProteinuria() {
    return proteinuria;
  }

  public void setProteinuria(SimpleTestResultType proteinuria) {
    this.proteinuria = proteinuria;
  }

  public AdditionalTestDto hematuria(SimpleTestResultType hematuria) {
    this.hematuria = hematuria;
    return this;
  }

   /**
   * Get hematuria
   * @return hematuria
  **/
  @Schema(description = "")
  public SimpleTestResultType getHematuria() {
    return hematuria;
  }

  public void setHematuria(SimpleTestResultType hematuria) {
    this.hematuria = hematuria;
  }

  public AdditionalTestDto arterialVenousGasPH(Float arterialVenousGasPH) {
    this.arterialVenousGasPH = arterialVenousGasPH;
    return this;
  }

   /**
   * Get arterialVenousGasPH
   * @return arterialVenousGasPH
  **/
  @Schema(description = "")
  public Float getArterialVenousGasPH() {
    return arterialVenousGasPH;
  }

  public void setArterialVenousGasPH(Float arterialVenousGasPH) {
    this.arterialVenousGasPH = arterialVenousGasPH;
  }

  public AdditionalTestDto arterialVenousGasPco2(Float arterialVenousGasPco2) {
    this.arterialVenousGasPco2 = arterialVenousGasPco2;
    return this;
  }

   /**
   * Get arterialVenousGasPco2
   * @return arterialVenousGasPco2
  **/
  @Schema(description = "")
  public Float getArterialVenousGasPco2() {
    return arterialVenousGasPco2;
  }

  public void setArterialVenousGasPco2(Float arterialVenousGasPco2) {
    this.arterialVenousGasPco2 = arterialVenousGasPco2;
  }

  public AdditionalTestDto arterialVenousGasPao2(Float arterialVenousGasPao2) {
    this.arterialVenousGasPao2 = arterialVenousGasPao2;
    return this;
  }

   /**
   * Get arterialVenousGasPao2
   * @return arterialVenousGasPao2
  **/
  @Schema(description = "")
  public Float getArterialVenousGasPao2() {
    return arterialVenousGasPao2;
  }

  public void setArterialVenousGasPao2(Float arterialVenousGasPao2) {
    this.arterialVenousGasPao2 = arterialVenousGasPao2;
  }

  public AdditionalTestDto arterialVenousGasHco3(Float arterialVenousGasHco3) {
    this.arterialVenousGasHco3 = arterialVenousGasHco3;
    return this;
  }

   /**
   * Get arterialVenousGasHco3
   * @return arterialVenousGasHco3
  **/
  @Schema(description = "")
  public Float getArterialVenousGasHco3() {
    return arterialVenousGasHco3;
  }

  public void setArterialVenousGasHco3(Float arterialVenousGasHco3) {
    this.arterialVenousGasHco3 = arterialVenousGasHco3;
  }

  public AdditionalTestDto gasOxygenTherapy(Float gasOxygenTherapy) {
    this.gasOxygenTherapy = gasOxygenTherapy;
    return this;
  }

   /**
   * Get gasOxygenTherapy
   * @return gasOxygenTherapy
  **/
  @Schema(description = "")
  public Float getGasOxygenTherapy() {
    return gasOxygenTherapy;
  }

  public void setGasOxygenTherapy(Float gasOxygenTherapy) {
    this.gasOxygenTherapy = gasOxygenTherapy;
  }

  public AdditionalTestDto altSgpt(Float altSgpt) {
    this.altSgpt = altSgpt;
    return this;
  }

   /**
   * Get altSgpt
   * @return altSgpt
  **/
  @Schema(description = "")
  public Float getAltSgpt() {
    return altSgpt;
  }

  public void setAltSgpt(Float altSgpt) {
    this.altSgpt = altSgpt;
  }

  public AdditionalTestDto astSgot(Float astSgot) {
    this.astSgot = astSgot;
    return this;
  }

   /**
   * Get astSgot
   * @return astSgot
  **/
  @Schema(description = "")
  public Float getAstSgot() {
    return astSgot;
  }

  public void setAstSgot(Float astSgot) {
    this.astSgot = astSgot;
  }

  public AdditionalTestDto creatinine(Float creatinine) {
    this.creatinine = creatinine;
    return this;
  }

   /**
   * Get creatinine
   * @return creatinine
  **/
  @Schema(description = "")
  public Float getCreatinine() {
    return creatinine;
  }

  public void setCreatinine(Float creatinine) {
    this.creatinine = creatinine;
  }

  public AdditionalTestDto potassium(Float potassium) {
    this.potassium = potassium;
    return this;
  }

   /**
   * Get potassium
   * @return potassium
  **/
  @Schema(description = "")
  public Float getPotassium() {
    return potassium;
  }

  public void setPotassium(Float potassium) {
    this.potassium = potassium;
  }

  public AdditionalTestDto urea(Float urea) {
    this.urea = urea;
    return this;
  }

   /**
   * Get urea
   * @return urea
  **/
  @Schema(description = "")
  public Float getUrea() {
    return urea;
  }

  public void setUrea(Float urea) {
    this.urea = urea;
  }

  public AdditionalTestDto haemoglobin(Float haemoglobin) {
    this.haemoglobin = haemoglobin;
    return this;
  }

   /**
   * Get haemoglobin
   * @return haemoglobin
  **/
  @Schema(description = "")
  public Float getHaemoglobin() {
    return haemoglobin;
  }

  public void setHaemoglobin(Float haemoglobin) {
    this.haemoglobin = haemoglobin;
  }

  public AdditionalTestDto totalBilirubin(Float totalBilirubin) {
    this.totalBilirubin = totalBilirubin;
    return this;
  }

   /**
   * Get totalBilirubin
   * @return totalBilirubin
  **/
  @Schema(description = "")
  public Float getTotalBilirubin() {
    return totalBilirubin;
  }

  public void setTotalBilirubin(Float totalBilirubin) {
    this.totalBilirubin = totalBilirubin;
  }

  public AdditionalTestDto conjBilirubin(Float conjBilirubin) {
    this.conjBilirubin = conjBilirubin;
    return this;
  }

   /**
   * Get conjBilirubin
   * @return conjBilirubin
  **/
  @Schema(description = "")
  public Float getConjBilirubin() {
    return conjBilirubin;
  }

  public void setConjBilirubin(Float conjBilirubin) {
    this.conjBilirubin = conjBilirubin;
  }

  public AdditionalTestDto wbcCount(Float wbcCount) {
    this.wbcCount = wbcCount;
    return this;
  }

   /**
   * Get wbcCount
   * @return wbcCount
  **/
  @Schema(description = "")
  public Float getWbcCount() {
    return wbcCount;
  }

  public void setWbcCount(Float wbcCount) {
    this.wbcCount = wbcCount;
  }

  public AdditionalTestDto platelets(Float platelets) {
    this.platelets = platelets;
    return this;
  }

   /**
   * Get platelets
   * @return platelets
  **/
  @Schema(description = "")
  public Float getPlatelets() {
    return platelets;
  }

  public void setPlatelets(Float platelets) {
    this.platelets = platelets;
  }

  public AdditionalTestDto prothrombinTime(Float prothrombinTime) {
    this.prothrombinTime = prothrombinTime;
    return this;
  }

   /**
   * Get prothrombinTime
   * @return prothrombinTime
  **/
  @Schema(description = "")
  public Float getProthrombinTime() {
    return prothrombinTime;
  }

  public void setProthrombinTime(Float prothrombinTime) {
    this.prothrombinTime = prothrombinTime;
  }

  public AdditionalTestDto otherTestResults(String otherTestResults) {
    this.otherTestResults = otherTestResults;
    return this;
  }

   /**
   * Get otherTestResults
   * @return otherTestResults
  **/
  @Schema(description = "")
  public String getOtherTestResults() {
    return otherTestResults;
  }

  public void setOtherTestResults(String otherTestResults) {
    this.otherTestResults = otherTestResults;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalTestDto additionalTestDto = (AdditionalTestDto) o;
    return Objects.equals(this.creationDate, additionalTestDto.creationDate) &&
        Objects.equals(this.changeDate, additionalTestDto.changeDate) &&
        Objects.equals(this.uuid, additionalTestDto.uuid) &&
        Objects.equals(this.sample, additionalTestDto.sample) &&
        Objects.equals(this.testDateTime, additionalTestDto.testDateTime) &&
        Objects.equals(this.haemoglobinuria, additionalTestDto.haemoglobinuria) &&
        Objects.equals(this.proteinuria, additionalTestDto.proteinuria) &&
        Objects.equals(this.hematuria, additionalTestDto.hematuria) &&
        Objects.equals(this.arterialVenousGasPH, additionalTestDto.arterialVenousGasPH) &&
        Objects.equals(this.arterialVenousGasPco2, additionalTestDto.arterialVenousGasPco2) &&
        Objects.equals(this.arterialVenousGasPao2, additionalTestDto.arterialVenousGasPao2) &&
        Objects.equals(this.arterialVenousGasHco3, additionalTestDto.arterialVenousGasHco3) &&
        Objects.equals(this.gasOxygenTherapy, additionalTestDto.gasOxygenTherapy) &&
        Objects.equals(this.altSgpt, additionalTestDto.altSgpt) &&
        Objects.equals(this.astSgot, additionalTestDto.astSgot) &&
        Objects.equals(this.creatinine, additionalTestDto.creatinine) &&
        Objects.equals(this.potassium, additionalTestDto.potassium) &&
        Objects.equals(this.urea, additionalTestDto.urea) &&
        Objects.equals(this.haemoglobin, additionalTestDto.haemoglobin) &&
        Objects.equals(this.totalBilirubin, additionalTestDto.totalBilirubin) &&
        Objects.equals(this.conjBilirubin, additionalTestDto.conjBilirubin) &&
        Objects.equals(this.wbcCount, additionalTestDto.wbcCount) &&
        Objects.equals(this.platelets, additionalTestDto.platelets) &&
        Objects.equals(this.prothrombinTime, additionalTestDto.prothrombinTime) &&
        Objects.equals(this.otherTestResults, additionalTestDto.otherTestResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, changeDate, uuid, sample, testDateTime, haemoglobinuria, proteinuria, hematuria, arterialVenousGasPH, arterialVenousGasPco2, arterialVenousGasPao2, arterialVenousGasHco3, gasOxygenTherapy, altSgpt, astSgot, creatinine, potassium, urea, haemoglobin, totalBilirubin, conjBilirubin, wbcCount, platelets, prothrombinTime, otherTestResults);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalTestDto {\n");
    
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    changeDate: ").append(toIndentedString(changeDate)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    sample: ").append(toIndentedString(sample)).append("\n");
    sb.append("    testDateTime: ").append(toIndentedString(testDateTime)).append("\n");
    sb.append("    haemoglobinuria: ").append(toIndentedString(haemoglobinuria)).append("\n");
    sb.append("    proteinuria: ").append(toIndentedString(proteinuria)).append("\n");
    sb.append("    hematuria: ").append(toIndentedString(hematuria)).append("\n");
    sb.append("    arterialVenousGasPH: ").append(toIndentedString(arterialVenousGasPH)).append("\n");
    sb.append("    arterialVenousGasPco2: ").append(toIndentedString(arterialVenousGasPco2)).append("\n");
    sb.append("    arterialVenousGasPao2: ").append(toIndentedString(arterialVenousGasPao2)).append("\n");
    sb.append("    arterialVenousGasHco3: ").append(toIndentedString(arterialVenousGasHco3)).append("\n");
    sb.append("    gasOxygenTherapy: ").append(toIndentedString(gasOxygenTherapy)).append("\n");
    sb.append("    altSgpt: ").append(toIndentedString(altSgpt)).append("\n");
    sb.append("    astSgot: ").append(toIndentedString(astSgot)).append("\n");
    sb.append("    creatinine: ").append(toIndentedString(creatinine)).append("\n");
    sb.append("    potassium: ").append(toIndentedString(potassium)).append("\n");
    sb.append("    urea: ").append(toIndentedString(urea)).append("\n");
    sb.append("    haemoglobin: ").append(toIndentedString(haemoglobin)).append("\n");
    sb.append("    totalBilirubin: ").append(toIndentedString(totalBilirubin)).append("\n");
    sb.append("    conjBilirubin: ").append(toIndentedString(conjBilirubin)).append("\n");
    sb.append("    wbcCount: ").append(toIndentedString(wbcCount)).append("\n");
    sb.append("    platelets: ").append(toIndentedString(platelets)).append("\n");
    sb.append("    prothrombinTime: ").append(toIndentedString(prothrombinTime)).append("\n");
    sb.append("    otherTestResults: ").append(toIndentedString(otherTestResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
