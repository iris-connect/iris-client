/*
 * IRIS-Gateway API
 * ### Encryption of the data to be transmitted (contact data) In order to be not limited in the amount of data, a hybrid encryption with symmetric encryption of the data and asymmetric encryption of the symmetric key is used for the encryption of the contact data.    1. The apps and applications get the public key of the health department as a 4096-bit RSA key from the IRIS+ server. This key is base64-encoded similar to the Private Enhanced Mail (PEM) format but without key markers (-----BEGIN PUBLIC KEY----- / -----END PUBLIC KEY-----).   2. The app generates a 256-bit AES key.   3. The data is encrypted with this key (algorithm: AES/CBC/PKCS5Padding and 16 byte IV)   4. IV bytes are prepended to the cipher text. Those merged bytes represent the encrypted content.   5. The AES key must be encrypted with the public RSA key of the health department. (algorithm: RSA with Optimal Asymmetric Encryption Padding (OAEP) \"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\")   6. The encrypted AES key and the encrypted content must be transmitted base64 encoded.    #### Schematic sequence    ```   pubKeyEncryption = publicKeyFromBase64(givenPublicKey);   contentKey = generateAESKey();   iv = generateRandomBytes(16);    encrypted = contentKey.encrypt(content, \"AES/CBC/PKCS5Padding\", iv);   keyEncrypted = pubKeyEncryption.encrypt(contentKey, \"RSA/NONE/OAEPWithSHA3-256AndMGF1Padding\");    submissionDto.encryptedData = base64Encode(concat(iv,encrypted));   submissionDto.secret = base64Encode(keyEncrypted);   ``` 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jens.kutzsche@gebea.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package iris.client_bff.search_client.web.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonPropertyOrder({
		LocationQueryResult.JSON_PROPERTY_LOCATIONS,
		LocationQueryResult.JSON_PROPERTY_TOTAL_ELEMENTS,
		LocationQueryResult.JSON_PROPERTY_PAGE,
		LocationQueryResult.JSON_PROPERTY_SIZE
})
public class LocationQueryResult {
	public static final String JSON_PROPERTY_LOCATIONS = "locations";
	public static final String JSON_PROPERTY_TOTAL_ELEMENTS = "totalElements";
	public static final String JSON_PROPERTY_PAGE = "page";
	public static final String JSON_PROPERTY_SIZE = "size";
	private List<LocationInformation> locations = new ArrayList<>();
	private long totalElements;
	private int page;
	private int size;

	public LocationQueryResult locations(List<LocationInformation> locations) {

		this.locations = locations;
		return this;
	}

	public LocationQueryResult addLocationsItem(LocationInformation locationsItem) {
		this.locations.add(locationsItem);
		return this;
	}

	public LocationQueryResult totalElements(long totalElements) {
		this.totalElements = totalElements;
		return this;
	}

	public LocationQueryResult page(int page) {
		this.page = page;
		return this;
	}

	public LocationQueryResult size(int size) {
		this.size = size;
		return this;
	}

	/**
	 * Get locations
	 * 
	 * @return locations
	 **/
	@JsonProperty(JSON_PROPERTY_LOCATIONS)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)

	public List<LocationInformation> getLocations() {
		return locations;
	}

	public void setLocations(List<LocationInformation> locations) {
		this.locations = locations;
	}

	/**
	 * Get totalElements
	 *
	 * @return totalElements
	 **/
	@JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)
	public long getTotalElements() {
		return totalElements;
	}

	public void setTotalElements(long totalElements) {
		this.totalElements = totalElements;
	}

	/**
	 * Get totalElements
	 *
	 * @return totalElements
	 **/
	@JsonProperty(JSON_PROPERTY_PAGE)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)
	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}


	/**
	 * Get totalElements
	 *
	 * @return totalElements
	 **/
	@JsonProperty(JSON_PROPERTY_SIZE)
	@JsonInclude(value = JsonInclude.Include.ALWAYS)
	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		LocationQueryResult locationQueryResult = (LocationQueryResult) o;
		return Objects.equals(this.locations, locationQueryResult.locations);
	}

	@Override
	public int hashCode() {
		return Objects.hash(locations);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class LocationList {\n");
		sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
		sb.append("    totalElements: ").append(totalElements).append("\n");
		sb.append("    page: ").append(page).append("\n");
		sb.append("    size: ").append(size).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
